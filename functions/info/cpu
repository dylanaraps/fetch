#!/usr/bin/env bash
getcpu () {
    case "$os" in
        "Mac OS X")
            cpu="$(sysctl -n machdep.cpu.brand_string)"
            cores=$(sysctl -n hw.ncpu)
        ;;

        *)
            case "$distro" in
                "OpenBSD"* | "FreeBSD"*)
                    # Get cpu name
                    cpu="$(sysctl -n hw.model)"
                    cpu=${cpu/[0-9]\.*}
                    cpu=${cpu/ @*}

                    # Get cpu speed
                    case "$distro" in
                        "OpenBSD"*) speed=$(sysctl -n hw.cpuspeed) ;;
                        "FreeBSD"*) speed=$(sysctl -n hw.clockrate) ;;
                    esac
                    speed=$((speed / 100))
                    cores=$(sysctl -n hw.ncpu)
                ;;

                *)
                    # Get cpu name
                    cpu="$(awk -F ': | @' '/model name/ {printf $2; exit}' /proc/cpuinfo)"

                    # Get cpu speed
                    if [ -d "/sys/devices/system/cpu/cpu0/cpufreq" ]; then
                        case "$speed_type" in
                            current) speed_type="scaling_cur_freq" ;;
                            min) speed_type="scaling_min_freq" ;;
                            max) speed_type="scaling_max_freq" ;;
                            bios) speed_type="bios_limit" ;;
                            scaling_current) speed_type="scaling_cur_freq" ;;
                            scaling_min) speed_type="scaling_min_freq" ;;
                            scaling_max) speed_type="scaling_max_freq" ;;
                        esac

                        read -r speed < \
                            /sys/devices/system/cpu/cpu0/cpufreq/${speed_type}

                        speed=$((speed / 100000))
                    else
                        speed=$(awk -F ': |\\.' '/cpu MHz/ {printf $2; exit}' /proc/cpuinfo)
                        speed=$((speed / 100))
                    fi

                    cores=$(awk -F ': ' '/siblings/ {printf $2; exit}' /proc/cpuinfo)
                ;;
            esac

            # Fix for speeds under 1ghz
            if [ -z "${speed:1}" ]; then
               speed="0.${speed}"
            else
               speed=${speed:0:1}.${speed:1}
            fi

            cpu="$cpu @ ${speed}GHz"
        ;;
    esac

    # Remove uneeded patterns from cpu output
    # This is faster than sed/gsub
    cpu=${cpu//(tm)}
    cpu=${cpu//(TM)}
    cpu=${cpu//(r)}
    cpu=${cpu//(R)}
    cpu=${cpu//CPU}
    cpu=${cpu//Processor}
    cpu=${cpu//Six-Core}
    cpu=${cpu//Eight-Core}
    cpu=${cpu//with Radeon HD Graphics}

    # Add cpu cores to output
    [ "$cpu_cores" == "on" ] && [ ! -z "$cores" ] && \
        cpu=${cpu/@/\(${cores}\) @}

    # Make the output of cpu shorter
    case "$cpu_shorthand" in
        "name")
            cpu=${cpu/@*}
        ;;

        "speed")
            cpu=${cpu#*@ }
        ;;

        "on" | "tiny")
            cpu=${cpu/Intel }
            cpu=${cpu/Core }
            cpu=${cpu/Core? Duo }
            cpu=${cpu/AMD }

            case "$cpu_shorthand" in
                "tiny") cpu=${cpu/@*} ;;
            esac
        ;;
    esac

    # Trim whitespace
    cpu=${cpu//+( )/ }

    # Add CPU info bar
    prin "$subtitle" "$cpu"

    if [ "$cpu_display" != "off" ]; then
        cpu_usage="$(ps aux | awk 'BEGIN { sum = 0 }  { sum += $3 }; END { print sum }')"
        cpu_usage="${cpu_usage/\.*}%"

        case "$cpu_display" in
            "info") prin "$subtitle Usage" "$cpu_usage" ;;
            "bar") prin "$subtitle Usage" "$(bar "${cpu_usage/'%'}" $(( 100 * cores )))" ;;
            "infobar") prin "$subtitle Usage" "${cpu_usage} $(bar "${cpu_usage/'%'}" $(( 100 * cores )))" ;;
            "barinfo") prin "$subtitle Usage" "$(bar "${cpu_usage/'%'}" $(( 100 * cores ))) $cpu_usage" ;;
        esac
    fi
    [ "$stdout_mode" != "on" ] && unset cpu
}
